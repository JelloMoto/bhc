@name Butcher, a card game
@inputs [S1 S2 S3]:wirelink
@persist [Players Data Buttons]:array
if(first()){
    function void makeButton(N,N2,N3,S:string){ #Quick function like 'Souls' core.egp.set.item.button.Index.String command.
        #Does the same thing, indexes the item, t will then be ran through a for-loop to check all buttons with
        #'E:touching(Wirelink,Index)', like in Soul, the run its specific timer.
        #N2 is what set of data, or screen it'll be tending wth.
        #N3 is the screen.
        Buttons[Buttons:count(),string]=N+"."+N2+"."+N3+"."+S
    }
 #include "bhc/some_function_libaries/fileFuncs"
 #include "bhc/some_function_libaries/egpFuncs"
 #include "bhc/some_function_libaries/arrayFuncs" 
 #Common includes

 setName("[-Butcher-]\n[-A card game created by friends-]\n[-Coded by Serconker-]\n[-Using shared libaries-]")    
 Data = array(S1,
              S2,
              S3) #Just something
    for(I=1,3){
        Data[I,wirelink]:egpClear()
    }
 timer("start",0)
}
if(clk("start")){
    for(I=1,3){
        local S = Data
        S[I,wirelink]:egpBox(1,vec2(256,256),vec2(512,512))
        S[I,wirelink]:egpBox(7,vec2(256,300),vec2(500,612))
        S[I,wirelink]:egpBox(8,vec2(256,512-76),vec2(512,240))
        S[I,wirelink]:egpTriangle(2,
                                  vec2(0,266),
                                  vec2(120,266),
                                  vec2(160,316))
        S[I,wirelink]:egpTriangle(4,
                                  vec2(352,316),
                                  vec2(392,266),
                                  vec2(512,266))
        S[I,wirelink]:egpTriangle(5,
                                  vec2(512,266),
                                  vec2(352,316),
                                  vec2(512,316))
        S[I,wirelink]:egpTriangle(6,
                                  vec2(0,316),
                                  vec2(160,316),
                                  vec2(0,266))
        S[I,wirelink]:egpPolyOutline(3,
                                     vec2(0,266),
                                     vec2(120,266),
                                     vec2(160,315), #
                                     vec2(352,315), #
                                     vec2(392,266),
                                     vec2(512,266),
                                     vec2(512,512),
                                     vec2(0,512))
        S[I,wirelink]:egpColor(1,vec(70,15,5))
        S[I,wirelink]:egpColor(2,vec(70,70,100))
        S[I,wirelink]:egpColor(3,vec(0,0,60))
        S[I,wirelink]:egpColor(4,vec(70,70,100))
        S[I,wirelink]:egpColor(5,vec(70,70,100))
        S[I,wirelink]:egpColor(6,vec(70,70,100))
        S[I,wirelink]:egpColor(7,vec(20,15,5))
        S[I,wirelink]:egpColor(8,vec(70,70,100))
        S[I,wirelink]:egpMaterial(7,"gui/center_gradient")
        S[I,wirelink]:egpAngle(7,90)
        S[I,wirelink]:egpSize(3,3)
    }
}
